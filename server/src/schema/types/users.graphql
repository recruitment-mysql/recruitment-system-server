extend type Query {
    getUserProfile(user_id: Int!): UserProfile
    login(input: UserLoginInput!): UserLoginResponse!
    greeting: String!
}
extend type Mutation {
    register(input: CreateUserInput!): User!
    forgot_password(input: forgot_password_input!): SuccessResponse!
    change_password(input : change_password_Input!):SuccessResponse!
}
scalar Date

type User {
    user_id: Int!
    email: String!
    avatar: String
    full_name: String
    role: Int!
    created_at: Date
    updated_at: Date
}

type UserProfile {
    user: User!
    candidateProfile: Candidate
    employerProfile: Employer
}

type Candidate {
    candidate_id: String!
    user_id: Int!
    cv_url: String
    skills: [Skill!]
    degree: Degree
    experience: [CandidateExperience!]
    status: Boolean
    total_experience_years: Int
    updated_at: Date
}

type CandidateExperience {
    company: String!
    role: String!
    years: Int!
    industry: Industry         # Từ industry_id -> object Industry
}
type Employer {
    employer_id: String!
    user_id: Int!
    industry: Industry         # industry_id → object
    social_links: SocialLinks
    description: String
    number_of_employees: Int
    branches: [Branch!]        # Danh sách chi nhánh
    city_address: String
    interest: Interest         # Phúc lợi
    status: Boolean
    updated_at: Date
}

type SocialLinks {
    website: String
    facebook: String
    linkedin: String
}

type Branch {
    name: String!
    specific_address: Int!
}

type Interest {
    salary: String
    insurance: String
    award: String
}

type Skill {
    skill_id: Int!
    name: String!
}

type Degree {
    degree_id: Int!
    name: String!
}

type Industry {
    industry_id: Int!
    name: String!
}




input UserLoginInput {
    email: String!
    password: String!
}
input forgot_password_input{
    email : String!
}
input change_password_Input {
    password_old: String!
    password_new: String!
}
type UserLoginResponse {
    token: String!
    user: User!
}
input CreateUserInput {
    email: String!
    password: String!
    full_name: String!
    role: Int!
    avarta:Upload
}
